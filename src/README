# Задание 1
Дан массив из 10000 элементов. Необходимо написать несколько 
реализаций некоторой функции F в зависимости от варианта. Функция должна 
быть реализована следующими способами:
0. Последовательно
1. С использованием многопоточности (Thread, Future, и т. д.)
2. С использованием ForkJoin.
После каждой операции с элементом массива (сравнение, сложение) 
добавить задержку в 1 мс при помощи Thread.sleep(1);
Провести сравнительный анализ затрат по времени и памяти при запуске 
каждого из вариантов реализации.
Варианты функций (выбор варианта осуществляется по формуле «Номер в 
списке группы % 3»)
0. Поиск суммы элементов массива.
1. Поиск максимального элемента в массиве.
2. Поиск минимального элемента в массиве.
# Задание 2
Программа запрашивает у пользователя на вход число. Программа 
имитирует обработку запроса пользователя в виде задержки от 1 до 5 секунд 
выводит результат: число, возведенное в квадрат. В момент выполнения запроса 
пользователь имеет возможность отправить новый запрос. Реализовать с 
использованием Future.
# Задание 3
Реализовать следующую многопоточную систему.
Файл. Имеет следующие характеристики:
0. Тип файла (например XML, JSON, XLS)
1. Размер файла — целочисленное значение от 10 до 100.
Генератор файлов -- генерирует файлы с задержкой от 100 до 1000 мс.
Очередь — получает файлы из генератора. Вместимость очереди — 5 
файлов.
Обработчик файлов — получает файл из очереди. Каждый обработчик 
имеет параметр — тип файла, который он может обработать. Время обработки 
файла: «Размер файла*7мс»
Система должна удовлетворять следующими условиям:
0. Должна быть обеспечена потокобезопасность.
1. Работа генератора не должна зависеть от работы обработчиков, и 
наоборот.
2. Если нет задач, то потоки не должны быть активны.
3. Если нет задач, то потоки не должны блокировать другие потоки.
4. Должна быть сохранена целостность данных
